name: Build libnode

on:
  workflow_dispatch:
    inputs:
      nodeVersion:
        description: "Node.js version"
        required: true

env:
  LIBNODE_NODE_VERSION: v${{ github.event.inputs.nodeVersion }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, windows-2022, ubuntu-22.04]
        arch: [x64, arm64]
        small_icu: [0, 1]
        exclude:
          - os: windows-2022
            arch: arm64
          - os: ubuntu-22.04
            arch: arm64
    runs-on: ${{ matrix.os }}
    env:
      LIBNODE_ARCH: ${{ matrix.arch }}
      LIBNODE_SMALL_ICU: ${{ matrix.small_icu }}
    defaults:
      run:
        working-directory: libnode
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Update
        run: sudo apt-get update
        if: runner.os == 'Linux'
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.2
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
        with:
          create-symlink: true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ github.event.inputs.nodeVersion }}
      #- uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install nasm on Windows
        run: choco install -y nasm
        if: runner.os == 'Windows'

      - name: Install rust target
        shell: bash
        run: rustup target add `python -m scripts.config`

      - name: Install LLVM on Windows
        run: |
          C:\\msys64\\usr\\bin\\bash.exe -lc "pacman --noconfirm -R mingw-w64-x86_64-clang-tools-extra mingw-w64-x86_64-clang"
          choco install -y llvm
        if: runner.os == 'Windows'

      - name: Install GNU patch on Windows
        run: choco install -y patch
        if: runner.os == 'Windows'

      - name: Install rust-bindgen
        run: cargo install bindgen-cli
        if: runner.os != 'Linux'

      - name: Download source code of Node.js
        run: python -m scripts.download

      - name: Patch source code of Node.js
        run: python -m scripts.patch

      - name: Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        if: runner.os == 'Windows'
      - uses: Swatinem/rust-cache@v2

      - name: Docker cache
        uses: ScribeMD/docker-cache@0.5.0
        if: runner.os == 'Linux'
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('docker/**') }}
      - name: Build docker image
        run: docker build . -t libnode-build
        if: runner.os == 'Linux'
        working-directory: docker

      - name: Build
        shell: bash
        run: python -m scripts.build
        if: runner.os != 'Linux'
      - name: Build linux
        uses: addnab/docker-run-action@v3
        if: runner.os == 'Linux'
        with:
          image: libnode-build
          options: -v ${{ github.workspace }}:/app
          run: |
            cd libnode
            python3 -m scripts.build
      
      - name: Fix permissions
        run: chown -R $(whoami) .
        if: runner.os == 'Linux'

      - name: Postprocess
        run: python -m scripts.postproc

      - name: Cleanup
        shell: bash
        run: rm -rf node-*

      - name: Archive
        run: |
          zipname=$(python -m scripts.archive)
          echo "zipname=$zipname" >> $GITHUB_OUTPUT
        shell: bash
        id: archive

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.archive.outputs.zipname }}
          path: libnode/${{ steps.archive.outputs.zipname }}

      - name: Test
        run: python -m scripts.test
        if: runner.os != 'Linux'
      - name: Test linux
        uses: addnab/docker-run-action@v3
        if: runner.os == 'Linux'
        with:
          image: libnode-build
          options: -v ${{ github.workspace }}:/app
          run: |
            cd libnode
            python3 -m scripts.test

  gh_release:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}
      - name: Compute checksums
        working-directory: ${{ runner.temp }}
        run: |
          mkdir zips
          mv ./*/*.zip ./zips
          cd zips
          echo '## SHA256 Checksums' > ../release_notes.md
          echo '```' >> ../release_notes.md
          sha256sum --binary *.zip >> ../release_notes.md
          echo '```' >> ../release_notes.md
      - name: Create release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: "libnode-${{ env.LIBNODE_NODE_VERSION }}"
          bodyFile: ${{ runner.temp }}/release_notes.md
      - name: Upload release assets
        uses: csexton/release-asset-action@v2
        with:
          pattern: ${{ runner.temp }}/zips/*.zip
          github-token: ${{ secrets.GITHUB_TOKEN }}
          release-url: ${{ steps.create_release.outputs.upload_url }}
